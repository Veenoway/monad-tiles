/* eslint-disable @typescript-eslint/no-explicit-any */
// lib/metamask/transactions.ts - VERSION COMPL√àTE FINALE

import { createPimlicoClient } from "permissionless/clients/pimlico";
import { formatEther, http, parseEther, type Address, type Hash } from "viem";
import { bundlerClient, publicClient } from "./config";

// ===================================
// 1. V√âRIFICATIONS
// ===================================

export async function checkSmartAccountBalance(
  smartAccountAddress: Address
): Promise<bigint> {
  return await publicClient.getBalance({ address: smartAccountAddress });
}

export async function isSmartAccountDeployed(
  smartAccountAddress: Address
): Promise<boolean> {
  const code = await publicClient.getCode({ address: smartAccountAddress });
  return code !== undefined && code !== "0x";
}

// ===================================
// 2. FINANCEMENT
// ===================================

export async function fundSmartAccount(
  walletClient: any,
  smartAccountAddress: Address,
  amount: string
): Promise<Hash> {
  console.log(`üí∞ Envoi de ${amount} MONAD au smart account...`);

  const hash = await walletClient.sendTransaction({
    to: smartAccountAddress,
    value: parseEther(amount),
  });

  console.log("‚úÖ Transaction de financement envoy√©e:", hash);

  // Attendre la confirmation
  await publicClient.waitForTransactionReceipt({ hash });
  console.log("‚úÖ Financement confirm√©");

  return hash;
}

// ===================================
// 3. D√âPLOIEMENT
// ===================================

export async function deploySmartAccount(
  smartAccount: any,
  walletClient: any
): Promise<Hash> {
  console.log("üöÄ D√©ploiement du smart account...");

  // V√©rifier si d√©j√† d√©ploy√©
  const alreadyDeployed = await isSmartAccountDeployed(smartAccount.address);
  if (alreadyDeployed) {
    console.log("‚úÖ Smart account d√©j√† d√©ploy√©");
    return "0x" as Hash; // D√©j√† d√©ploy√©
  }

  // R√©cup√©rer les param√®tres de factory
  const { factory, factoryData } = await smartAccount.getFactoryArgs();

  console.log("Factory:", factory);
  console.log("FactoryData length:", factoryData.length);

  // Envoyer la transaction de d√©ploiement
  const hash = await walletClient.sendTransaction({
    to: factory,
    data: factoryData,
    value: BigInt(0),
  });

  console.log("‚úÖ Transaction de d√©ploiement envoy√©e:", hash);

  // Attendre la confirmation
  const receipt = await publicClient.waitForTransactionReceipt({ hash });
  console.log("‚úÖ Smart account d√©ploy√© √†:", smartAccount.address);

  return receipt.transactionHash;
}

// ===================================
// 4. ENVOYER UNE USEROPERATION
// ===================================

interface SendUserOperationParams {
  smartAccount: any;
  to: Address;
  value: string;
  data?: `0x${string}`;
  nonce?: bigint;
}

export async function sendUserOperation({
  smartAccount,
  to,
  value,
  data,
}: SendUserOperationParams): Promise<Hash> {
  // 1. V√©rifier d√©ploiement
  const deployed = await isSmartAccountDeployed(smartAccount.address);
  if (!deployed) {
    throw new Error("‚ùå Smart account non d√©ploy√©");
  }

  // 2. V√©rifier le solde
  const balance = await publicClient.getBalance({
    address: smartAccount.address,
  });

  console.log("üí∞ Solde SA:", formatEther(balance), "MON");

  if (balance < parseEther("0.001")) {
    throw new Error(
      `Solde insuffisant: ${formatEther(
        balance
      )} MON. Minimum requis: 0.001 MON`
    );
  }

  const pimlicoClient = createPimlicoClient({
    transport: http(
      `https://api.pimlico.io/v2/10143/rpc?apikey=${process.env.NEXT_PUBLIC_PIMLICO_API_KEY}`
    ),
  });

  try {
    // 3. R√©cup√©rer gas prices et BOOSTER
    const gasPrice = await pimlicoClient.getUserOperationGasPrice();
    console.log("‚õΩ Gas original:", gasPrice.fast);

    // ‚úÖ BOOST x2 pour √™tre s√ªr que √ßa mine
    const boostedGas = {
      maxFeePerGas: gasPrice.fast.maxFeePerGas * BigInt(2),
      maxPriorityFeePerGas: gasPrice.fast.maxPriorityFeePerGas * BigInt(2),
    };
    console.log("üöÄ Gas boost√© x2:", boostedGas);

    // 4. Pr√©parer les calls
    const calls = [
      {
        to,
        value: parseEther(value),
        data: data || ("0x" as `0x${string}`),
      },
    ];

    // 5. ‚úÖ ENVOYER SANS ESTIMATION - Laisser le bundler g√©rer
    console.log("üì§ Envoi UserOperation...");
    const userOpHash = await bundlerClient.sendUserOperation({
      account: smartAccount,
      calls,
      ...boostedGas, // Gas boost√©
      // ‚ùå PAS d'estimation manuelle
    });

    console.log("‚úÖ UserOp envoy√©e:", userOpHash);
    console.log("üîó Hash:", userOpHash);

    // 6. Attendre avec timeout long et polling fr√©quent
    console.log("‚è≥ Attente confirmation (max 2 minutes)...");

    const startTime = Date.now();
    const { receipt } = await bundlerClient.waitForUserOperationReceipt({
      hash: userOpHash,
      timeout: 120000, // ‚úÖ 2 MINUTES
      pollingInterval: 2000, // V√©rifier toutes les 2 secondes
    });

    const duration = ((Date.now() - startTime) / 1000).toFixed(1);
    console.log(`‚úÖ CONFIRM√âE en ${duration}s !`);
    console.log("üìù Transaction hash:", receipt.transactionHash);
    console.log("üß± Block:", receipt.blockNumber);

    return receipt.transactionHash;
  } catch (error: any) {
    console.error("‚ùå Erreur compl√®te:", error);

    // Analyser l'erreur
    if (error.message?.includes("timeout") || error.name === "TimeoutError") {
      // La UserOp a √©t√© envoy√©e mais pas confirm√©e
      console.error("‚è±Ô∏è TIMEOUT: Transaction pas confirm√©e apr√®s 2 minutes");
      console.error("üí° Causes possibles:");
      console.error("   - Gas trop bas (m√™me avec boost)");
      console.error("   - Bundler Pimlico surcharg√©");
      console.error("   - R√©seau Monad lent");

      throw new Error(
        "‚è±Ô∏è Transaction timeout. Le r√©seau est peut-√™tre surcharg√©. R√©essayez dans 2 minutes."
      );
    }

    if (error.message?.includes("nonce")) {
      const currentNonce = await smartAccount.getNonce();
      console.error("üî¢ Nonce actuel:", currentNonce);
      throw new Error("Nonce invalide. Une transaction est d√©j√† en cours.");
    }

    if (error.message?.includes("insufficient")) {
      throw new Error("Fonds insuffisants dans le Smart Account");
    }

    if (error.message?.includes("AA25")) {
      throw new Error("Transaction d√©j√† en cours avec ce nonce");
    }

    // Erreur g√©n√©rique
    throw new Error(`Erreur: ${error.shortMessage || error.message}`);
  }
}

// ===================================
// 5. TEST DU BUNDLER
// ===================================

export async function testBundlerConnection() {
  try {
    console.log("üß™ Test de connexion bundler...");

    const chainId = await bundlerClient.chain.id;
    console.log("‚úÖ Chain ID:", chainId);

    const entryPoints = await bundlerClient.getSupportedEntryPoints();
    console.log("‚úÖ EntryPoints:", entryPoints);

    return {
      success: true,
      chainId,
      entryPoints,
    };
  } catch (error) {
    console.error("‚ùå Erreur test bundler:", error);
    return {
      success: false,
      error,
    };
  }
}
